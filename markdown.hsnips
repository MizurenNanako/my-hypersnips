global
// JavaScript code
function gen_matrix(nrow, ncol) {
	let results = "";
	let order = 1;
	for (var i=0; i < nrow; i++){
		results += ' ';
		for(var j = 0; j < ncol - 1; j++){
			results += "${" + (order).toString() 
				+ ":a_{" + (i+1).toString() + (j+1).toString() 
				+ "\\}}" + " & ";
			order ++;
		}
		results += "${" + (order).toString() 
			+ ":a_{" + (i+1).toString() + (ncol).toString() 
			+ "\\}} \\\\\\\n";
		order ++;
	}
	return results;
}

endglobal

snippet `\$\$` iAm
$$
$1
$$
$0
endsnippet

// greak letters

snippet `;sum` iAm
\sum_{$1}$0
endsnippet

snippet `'a` iAm
\alpha
endsnippet

priority 101
snippet `''a` iAm
\Alpha
endsnippet

snippet `'b` iAm
\beta
endsnippet

priority 101
snippet `''b` iAm
\Beta
endsnippet

snippet `'g` iAm
\gamma
endsnippet

priority 101
snippet `''g` iAm
\Gamma
endsnippet

snippet `'d` iAm
\delta
endsnippet

priority 101
snippet `''d` iAm
\Delta
endsnippet

snippet `'e` iAm
\epsilon
endsnippet

priority 101
snippet `''e` iAm
\Epsilon
endsnippet

snippet `'ve` iAm
\varepsilon
endsnippet

snippet `'z` iAm
\zeta
endsnippet

priority 101
snippet `''z` iAm
\Zeta
endsnippet

snippet `'h` iAm
\eta
endsnippet

priority 101
snippet `''h` iAm
\Eta
endsnippet

snippet `'th|'0` iAm
\theta
endsnippet

priority 101
snippet `''th` iAm
\Theta
endsnippet

snippet `'i` iAm
\iota
endsnippet

priority 101
snippet `''i` iAm
\Iota
endsnippet

snippet `'k` iAm
\kappa
endsnippet

priority 101
snippet `''k` iAm
\Kappa
endsnippet

snippet `'l` iAm
\lambda
endsnippet

priority 101
snippet `''l` iAm
\Lambda
endsnippet

snippet `'m` iAm
\mu
endsnippet

priority 101
snippet `''m` iAm
\Mu
endsnippet

snippet `'x` iAm
\xi
endsnippet

priority 101
snippet `''x` iAm
\Xi
endsnippet

snippet `'p` iAm
\pi
endsnippet

priority 101
snippet `''p` iAm
\Pi
endsnippet

snippet `'r|'6` iAm
\rho
endsnippet

priority 101
snippet `''r|''6` iAm
\Rho
endsnippet

snippet `'s|'7` iAm
\sigma
endsnippet

priority 101
snippet `''s|''7` iAm
\Sigma
endsnippet

snippet `'t` iAm
\tau
endsnippet

priority 101
snippet `''t` iAm
\Tau
endsnippet

snippet `'5` iAm
\phi
endsnippet

priority 101
snippet `''5` iAm
\Phi
endsnippet

snippet `'4` iAm
\psi
endsnippet

priority 101
snippet `''4` iAm
\Psi
endsnippet

snippet `'o` iAm
\omega
endsnippet

priority 101
snippet `''o` iAm
\Omega
endsnippet

// Math fonts

// priority 101
// snippet `([A-Za-z0-9_^\\(){}]+);9` iAm
// \left( ``rv = m[1]`` \right)
// endsnippet

snippet `;9` iAm
\left( $1 \right) $0
endsnippet

snippet `==` iAm
+
endsnippet

snippet `([A-Za-z]+)(scr|frak|bb|cal) ` iAm
\math``rv = m[2] + '{' + m[1].toUpperCase()``} 
endsnippet

snippet `([A-Za-z0-9]+)(bf|rm) ` iAm
\math``rv = m[2] + '{' + m[1]``} 
endsnippet

snippet `([A-Za-z0-9]+)bs ` iAm
\boldsymbol{``rv = m[1]``} 
endsnippet

// fraction

snippet `//` iAm
\dfrac{${1:${VISUAL}}}{$2}$0
endsnippet

priority 101
snippet `(\\?[A-Za-z0-9_^{}]+)//` iAm
\dfrac{``rv = m[1]``}{$1}$0
endsnippet

// symbols

snippet `;abs|;\|` iAm
\left| $1 \right|$0
endsnippet

snippet `;ii` iAm
\mathrm{i}
endsnippet
endsnippet

snippet `;ee` iAm
\mathrm{e}
endsnippet

snippet `;dd` iAm
\mathrm{d}
endsnippet

snippet `;pp` iAm
\partial 
endsnippet

snippet `;d/` iAm
\frac{\mathrm{d}}{\mathrm{d}$1}$0
endsnippet

snippet `;p/` iAm
\frac{\partial}{\partial{$1}}$0
endsnippet

snippet `;'` iAm
\dot{$1}$0
endsnippet

snippet `;x` iAm
\times
endsnippet

snippet `;\.` iAm
\cdot
endsnippet

snippet `;^` iAm
\wedge
endsnippet

snippet `;\*` iAm
\star
endsnippet

snippet `;gt` iAm
> 
endsnippet

snippet `;lt` iAm
< 
endsnippet

snippet `;(geq|leq|to|neq|sin|cos|tan|sh|ch|th|cth|ln|log|exp)` iAm
\``rv = m[1]`` 
endsnippet

snippet `;tg` iAm
\tan
endsnippet

snippet `;asin` iAm
\arcsin
endsnippet

snippet `;acos` iAm
\arccos
endsnippet

snippet `;atg` iAm
\arctan
endsnippet

snippet `;actg` iAm
\arccot
endsnippet

snippet `;ash` iAm
\sh^{-1}
endsnippet

snippet `;ach` iAm
\ch^{-1}
endsnippet

snippet `;ath` iAm
\th^{-1}
endsnippet

snippet `;acth` iAm
\cth^{-1}
endsnippet

snippet `;f(\.*)([A-Za-z]|\\[A-Za-z][a-z]* )` iAm
``rv = m[2] + "'".repeat(m[1].length)``\left( $1 \right)$0
endsnippets

snippet `;to` iAm
\to
endsnippet

snippet `;S` iAm
\int 
endsnippet

snippet `;sq` iAm
\sqrt{$1}$0
endsnippet

snippet `;ii ` iAm
\int_{$1}^{$2}$0
endsnippet

snippet `;lim ` iAm
\lim_{$1}$0
endsnippet

snippet `\.([A-Za-z0-9]+)\.` iAm
^{``rv = m[1]``}
endsnippet

snippet `\^\{([^}]*)\}\.` iAm
_{``rv = m[1]``}
endsnippet

snippet `_\{([^}=]*)\}\.` iAm
^{``rv = m[1]``}
endsnippet

snippet `\^\{([^}]*)\},\.` iAm
^{``rv = m[1]``}_{$1}$0
endsnippet

snippet `([\^_]\{(?:[a-z]|\\[a-z]+))\};=` iAm
``rv = m[1] + "+1"``}
endsnippets

snippet `([\^_]\{(?:[a-z]|\\[a-z]+))\};-` iAm
``rv = m[1] + "-1"``}
endsnippets

snippet `_\{([^}]*)\},\.` iAm
_{``rv = m[1]``}^{$1}$0
endsnippet

snippet `;ali ` iAm
\begin{aligned}
	$1
\end{aligned}$0
endsnippet

snippet `;cases ` iAm
\begin{cases}
	$1
\end{cases}$0
endsnippet

snippet `--` iAm
&
endsnippet

priority 101
snippet `;([bpBP]|)mat([0-9])([0-9]) ` iAm
\begin{``rv = m[1]``matrix}
``rv = gen_matrix(m[2], m[3])``\end{``rv = m[1]``matrix}$0
endsnippet